generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  // I actually love prisma python, seriously...
  recursive_type_depth = -1
}

datasource db {
  provider     = "postgresql"
  url          = env("VINDEX_DB_URL")
  relationMode = "foreignKeys"
}

model Core {
  id                   Int     @id @unique @default(1)
  notifyChannel        BigInt?
  invitePermissionCode BigInt?
}

model ExternalCog {
  /// The path will be the module's path using dot notation
  path   String  @id @unique
  loaded Boolean
}

model User {
  id        BigInt   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile?

  // Attributes used by bot mods.
  isBotMod         Boolean     @default(false)
  createdBlacklist Blacklist[] @relation("blacklistedBy")
  allowedGuilds    Guild[]     @relation("allowedBy")
}

model Profile {
  id        BigInt   @id @unique
  user      User     @relation(fields: [id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  color       String?
  description String?        @db.Char(4096)
  fields      ProfileField[]
  modules     String[]
}

model ProfileField {
  id        BigInt  @id @unique
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId BigInt

  name  String
  value String
}

model Blacklist {
  id              BigInt   @id @unique
  reason          String
  blacklistedBy   User     @relation("blacklistedBy", fields: [blacklistedById], references: [id])
  blacklistedById BigInt
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Guild {
  id              BigInt    @id @unique
  allowed         Boolean?
  allowanceBy     User?     @relation("allowedBy", fields: [allowanceById], references: [id])
  allowanceById   BigInt?
  allowanceAt     DateTime?
  allowanceReason String?
  locale          String    @default("en")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
