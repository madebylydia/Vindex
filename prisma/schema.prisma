generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  // I actually love prisma python, seriously...
  recursive_type_depth = -1
}

datasource db {
  provider     = "postgresql"
  url          = env("VINDEX_DB_URL")
  relationMode = "foreignKeys"
}

// Only one column will exist.
model Core {
  id                   Int     @id @unique @default(1)
  notifyChannel        BigInt?
  invitePermissionCode BigInt?
}

model LoadedCog {
  id   Int    @id @unique @default(autoincrement())
  name String @unique
}

// Following models are used by "GlobalProfile"
model Profile {
  id   String @id @unique
  user User?  @relation(fields: [id], references: [id])

  color       String?
  description String?        @db.Char(4096)
  fields      ProfileField[]
  modules     String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfileField {
  id        Int     @id @unique
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String

  name  String
  value String
}

// Following models are used by the bot's core.

// Blacklist is used to blacklist individual users from interacting with the bot.
model Blacklist {
  /// WARN! Generated ID. The Discord ID is stored in `blacklistedId`.
  id            Int      @id @unique @default(autoincrement())
  blacklistedId String   @unique
  createdAt     DateTime @default(now())
  createdBy     User?    @relation(fields: [createdById], references: [id], onDelete: NoAction)
  createdById   String
  reason        String
  updatedAt     DateTime @updatedAt
}

// Guilds-related models.

model User {
  id        String   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations. Not in actual table.
  profile          Profile?
  botMod           BotMod?
  blacklistedUsers Blacklist[]
  allowedGuilds    GuildAllowance[]
}

model BotMod {
  id    Int     @id @unique @default(autoincrement())
  dId   String  @unique
  power Boolean @default(true)
  user  User?   @relation(fields: [dId], references: [id], onDelete: Cascade)
}

model Guild {
  id     String @id @unique
  locale String @default("en")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// GuildAllowance(s) are used by the "Falx" cog.
// They allow or not for usage of the bot inside a guild.
model GuildAllowance {
  id              String   @id @unique
  allowed         Boolean  @default(false)
  allowanceReason String   @db.Char(1000)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       User?    @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById     String
}
